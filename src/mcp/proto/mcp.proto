syntax = "proto3";

package third_party_py_mcp_grpc_proto;

// MCP protocol schema based on the MCP specification:
// https://modelcontextprotocol.io/specification/2025-06-18/
// Last Updated on: August 18, 2025.

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

service Mcp {
  //
  // Resources
  //

  // List resources.
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse);
  // Read a resource.
  // In order to better integrate with existing data plane mechanisms for
  // request routing and authz, the client will add a header called
  // mcp_resource whose value is the name of the resource being requested.
  rpc ReadResource(ReadResourceRequest) returns (ReadResourceResponse);
  // List resource templates.
  rpc ListResourceTemplates(ListResourceTemplatesRequest)
      returns (ListResourceTemplatesResponse);
  // Subscribe to a resource.  Server will send back a response whenever
  // the resource changes.
  rpc ResourceSubscribe(ResourceSubscribeRequest)
      returns (stream ResourceSubscribeResponse);

  //
  // Prompts
  //

  // List prompts.
  rpc ListPrompts(ListPromptsRequest) returns (ListPromptsResponse);

  // Get a prompt.
  // In order to better integrate with existing data plane mechanisms for
  // request routing and authz, the client will add a header called
  // mcp_resource whose value is the name of the prompt being requested.
  rpc GetPrompt(GetPromptRequest) returns (GetPromptResponse);

  //
  // Tools
  //

  // List tools.
  rpc ListTools(ListToolsRequest) returns (ListToolsResponse);

  // Call a tool.
  // In order to better integrate with existing data plane mechanisms for
  // request routing and authz, the client will add a header called
  // mcp_resource whose value is the name of the tool being called.
  rpc CallTool(stream CallToolRequest) returns (stream CallToolResponse);

  //
  // Completions
  //

  // Requests completions.
  // In order to better integrate with existing data plane mechanisms for
  // request routing and authz, the client will add a header called
  // mcp_resource whose value is the name of the resource or prompt being
  // used for completion.
  rpc Complete(CompletionRequest) returns (CompletionResponse);
}

enum ProtocolVersion {
  VERSION_UNKNOWN = 0;
  VERSION_20250326 = 1;
  VERSION_20250618 = 2;
  // More values can be added as needed.
}

// If the request or response metadata field includes the key "progressToken"
// and the peer supports progress notifications, then the peer will send back
// the following.
// https://modelcontextprotocol.io/specification/2025-03-26/basic/utilities/progress
message ProgressNotification {
  string progress_token = 1;
  float progress = 2;
  float total = 3;
  string message = 4;
}

// Logging, as per
// https://modelcontextprotocol.io/specification/2025-03-26/server/utilities/logging.
enum LogLevel {
  LOG_LEVEL_UNKNOWN = 0;
  LOG_LEVEL_DEBUG = 1;
  LOG_LEVEL_INFO = 2;
  LOG_LEVEL_NOTICE = 3;
  LOG_LEVEL_WARNING = 4;
  LOG_LEVEL_ERROR = 5;
  LOG_LEVEL_CRITICAL = 6;
  LOG_LEVEL_ALERT = 7;
  LOG_LEVEL_EMERGENCY = 8;
}

message LogMessage {
  LogLevel log_level = 1;
  string logger = 2;  // Optional.
  google.protobuf.Value data = 3;
}

// Common fields used in all requests from client to server.
message RequestFields {
  // Required only on the initial request message on any RPC.
  ProtocolVersion protocol_version = 1;

  // Escape hatch for arbitrary side-channel data.
  google.protobuf.Struct metadata = 2;

  // Pagination support, as described in
  // https://modelcontextprotocol.io/specification/2025-03-26/server/utilities/pagination.
  string cursor = 3;  // Optional.
  ProgressNotification progress = 4;

  // Supports session resumability, as described in
  // https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#resumability-and-redelivery.
  string last_event_id = 5;  // Optional.

  LogLevel set_log_level = 6;  // Optional.

  // Sampling, as per
  // https://modelcontextprotocol.io/specification/2025-03-26/client/sampling.
  SamplingCreateMessageResult sampling_create_message_result = 7;

  // Root list response, as per
  // https://modelcontextprotocol.io/specification/2025-03-26/client/roots.
  ListRootsResult root_list_result = 8;

  // Elicitation response, as per
  // https://modelcontextprotocol.io/specification/2025-06-18/client/elicitation.
  ElicitResult elicit_result = 9;
}

// Common fields used in all responses from server to client.
message ResponseFields {
  // Required only on the initial response message on any RPC.
  ProtocolVersion protocol_version = 1;

  // Optional.  Sent only on the initial response on any RPC.
  string instructions = 2;

  // Optional.  Sent only on the initial response on any RPC.
  // Supports session resumability, as described in
  // https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#resumability-and-redelivery.
  string event_id = 3;

  // Escape hatch for arbitrary side-channel data.
  google.protobuf.Struct metadata = 4;

  // Pagination support, as described in
  // https://modelcontextprotocol.io/specification/2025-03-26/server/utilities/pagination.
  string next_cursor = 5;  // Optional.

  ProgressNotification progress = 6;

  LogMessage log_message = 7;  // Optional.

  // Sampling, as per
  // https://modelcontextprotocol.io/specification/2025-03-26/client/sampling.
  SamplingCreateMessageRequest sampling_create_message = 8;

  // Root list request, as per
  // https://modelcontextprotocol.io/specification/2025-03-26/client/roots.
  ListRootsRequest list_roots_request = 9;
  bool notify_on_root_list_update = 10;

  // Elicitations, as per
  // https://modelcontextprotocol.io/specification/2025-06-18/client/elicitation.
  ElicitRequest elicit_request = 11;
}
enum Role {
  ROLE_UNKNOWN = 0;
  ROLE_USER = 1;
  ROLE_ASSISTANT = 2;
}

message Annotations {
  repeated Role audience = 1;
  float priority = 2;  // Must be in range [0,1].
}

message TextContent {
  string text = 1;
  Annotations annotations = 2;  // Optional.
}

message ImageContent {
  bytes data = 1;
  string mime_type = 2;
  Annotations annotations = 3;  // Optional.
}

message AudioContent {
  bytes data = 1;
  string mime_type = 2;
  Annotations annotations = 3;  // Optional.
}
message ListRootsRequest {}

message ListRootsResult {
  message Root {
    string uri = 1;
    string name = 2;  // Optional.
  }
  repeated Root roots = 1;
}

// Represents a message that contains text or binary data.
message SamplingMessage {
  Role role = 1;  // Which role is sending the message.

  // Exactly one of these fields must be populated.
  // (Not using "oneof", since that causes forward-compatibility problems.)
  TextContent text = 2;
  ImageContent image = 3;
  AudioContent audio = 4;
}

message SamplingCreateMessageRequest {
  repeated SamplingMessage messages = 1;

  message ModelPreferences {
    message ModelHint {
      string name = 1;  // Optional.
    }
    repeated ModelHint hints = 1;
    float intelligence_priority = 2;
    float speed_priority = 3;
    float cost_priority = 4;
  }
  ModelPreferences model_preferences = 2;  // Optional.

  string system_prompt = 3;  // Optional.

  enum IncludeContext {
    NONE = 0;
    THIS_SERVER = 1;
    ALL_SERVERS = 2;
  }
  IncludeContext include_context = 4;  // Optional.

  float temperature = 5;              // Optional.
  int32 max_tokens = 6;               // Optional.
  repeated string stop_sequence = 7;  // Optional.
}

message SamplingCreateMessageResult {
  SamplingMessage message = 1;
  string model = 2;
  string stop_reason = 3;  // Optional.
}
message PrimitiveSchemaDefinition {
  message StringSchema {
    enum Format {
      FORMAT_UNKNOWN = 0;
      FORMAT_EMAIL = 1;
      FORMAT_URI = 2;
      FORMAT_DATE = 3;
      FORMAT_DATE_TIME = 4;
    }
    string title = 1;
    string description = 2;
    uint64 min_length = 3;
    uint64 max_length = 4;
    Format format = 5;
  }

  message NumberSchema {
    string title = 1;
    string description = 2;
    uint64 minimum = 3;
    uint64 maximum = 4;
  }

  message BooleanSchema {
    string title = 1;
    string description = 2;
    bool default = 3;
  }

  message EnumSchema {
    string title = 1;
    string description = 2;
    repeated string enum_list = 3;
    repeated string enum_names = 4;
  }

  // Exactly one of these fields will be present.
  // (Not using "oneof", since that causes forward-compatibility problems.)
  StringSchema string_schema = 1;
  NumberSchema number_schema = 2;
  BooleanSchema boolean_schema = 3;
  EnumSchema enum_schema = 4;
}

message ElicitRequest {
  string message = 1;  // Message to present to user.  Required.
  map<string, PrimitiveSchemaDefinition> requested_schema = 2;
  repeated string required_fields = 3;
}

message ElicitResult {
  enum Type {
    UNKNOWN = 0;
    TYPE_ACCEPT = 1;
    TYPE_DECLINE = 2;
    TYPE_CANCEL = 3;
  }
  Type type = 1;
  google.protobuf.Struct content = 2;
}
//
// ListResources method
//

// Represents a resource.
message Resource {
  string uri = 1;
  string name = 2;
  string title = 7;
  string description = 3;       // Optional.
  string mime_type = 4;         // Optional.
  Annotations annotations = 5;  // Optional.
  uint64 size = 6;              // Optional.
}

message ListResourcesRequest {
  RequestFields common = 1;
}

message ListResourcesResponse {
  ResponseFields common = 1;

  repeated Resource resources = 2;
  google.protobuf.Duration ttl = 3;
}

//
// ReadResource method
//

// Represents the contents of a resource.
message ResourceContents {
  string uri = 1;
  string mime_type = 2;

  // Exactly one of these fields must be populated.
  // (Not using "oneof", since that causes forward-compatibility problems.)
  string text = 3;
  bytes blob = 4;
}

message ReadResourceRequest {
  RequestFields common = 1;
  string uri = 2;
}

message ReadResourceResponse {
  ResponseFields common = 1;
  ResourceContents resource = 2;
}

//
// ListResourceTemplates method
//

// Represents a resource template.
message ResourceTemplate {
  string uri_template = 1;
  string name = 2;
  string title = 6;
  string description = 3;       // Optional.
  string mime_type = 4;         // Optional.
  Annotations annotations = 5;  // Optional.
}

message ListResourceTemplatesRequest {
  RequestFields common = 1;
}

message ListResourceTemplatesResponse {
  ResponseFields common = 1;
  repeated ResourceTemplate resource_templates = 2;
  google.protobuf.Duration ttl = 3;
}

//
// ResourceSubscribe method
//

message ResourceSubscribeRequest {
  RequestFields common = 1;
  string uri = 2;
}

message ResourceSubscribeResponse {
  ResponseFields common = 1;
}
//
// ListPrompts method
//

// Represents a prompt.
message Prompt {
  message Argument {
    string name = 1;
    string title = 4;
    string description = 2;  // Optional.
    bool required = 3;       // Optional.
  }

  string name = 1;
  string title = 4;
  string description = 2;           // Optional.
  repeated Argument arguments = 3;  // Optional.
}

message ListPromptsRequest {
  RequestFields common = 1;
}

message ListPromptsResponse {
  ResponseFields common = 1;
  repeated Prompt prompts = 2;
  google.protobuf.Duration ttl = 3;
}

//
// GetPrompt method
//

message EmbeddedResource {
  ResourceContents contents = 1;
  Annotations annotations = 2;  // Optional.
}

message PromptMessage {
  Role role = 1;

  // Exactly one of these fields must be populated.
  // (Not using "oneof", since that causes forward-compatibility problems.)
  TextContent text = 2;
  ImageContent image = 3;
  AudioContent audio = 4;
  EmbeddedResource embedded_resource = 5;
  Resource resource_link = 6;
}
message GetPromptRequest {
  RequestFields common = 1;
  string name = 2;
  map<string, string> arguments = 3;
}

message GetPromptResponse {
  ResponseFields common = 1;
  string description = 2;  // Optional.
  repeated PromptMessage messages = 3;
}
//
// ListTools and WatchToolList methods
//

message ToolAnnotations {
  string title = 1;           // Optional.
  bool read_only_hint = 2;    // Optional.
  bool destructive_hint = 3;  // Optional.
  bool idempotent_hint = 4;   // Optional.
  bool open_world_hint = 5;   // Optional.
}

// Represents a tool.
message Tool {
  string name = 1;
  string title = 6;
  string description = 2;  // Optional.
  google.protobuf.Struct input_schema = 3;
  google.protobuf.Struct output_schema = 5;  // Optional.
  ToolAnnotations annotations = 4;           // Optional.
}

message ListToolsRequest {
  RequestFields common = 1;
}

message ListToolsResponse {
  ResponseFields common = 1;
  repeated Tool tools = 2;
  google.protobuf.Duration ttl = 3;
}

//
// CallTool method
//

message CallToolRequest {
  RequestFields common = 1;

  message Request {
    string name = 1;
    google.protobuf.Struct arguments = 2;
  }

  // Exactly one of these fields must be populated.
  // (Not using "oneof", since that causes forward-compatibility problems.)
  Request request = 2;  // Required on initial request only.
}

message CallToolResponse {
  ResponseFields common = 1;

  message Result {
    // Unstructured result contents.  At least one will be populated if
    // the tool does not define an output schema.  If the tool does define
    // an output schema, the structured_content field will be populated
    // instead, but one of these fields may still be populated for backward
    // compatibility.
    //
    // No more than one of these fields must be populated.
    // (Not using "oneof", since that causes forward-compatibility problems.)
    TextContent text = 1;
    ImageContent image = 2;
    AudioContent audio = 3;
    EmbeddedResource embedded_resource = 4;
    Resource resource_link = 7;

    // If the tool defines an output schema, this field will be populated.
    // Clients that support structured output should ignore the fields
    // above if this field is set.
    google.protobuf.Struct structured_content = 6;

    bool is_error = 5;  // Optional.
  }

  // Exactly one of these fields must be populated.
  // (Not using "oneof", since that causes forward-compatibility problems.)
  Result result = 2;
}
message ResourceReference {
  string uri = 1;
}

message PromptReference {
  string name = 1;
  string title = 2;
}

message CompletionRequest {
  RequestFields common = 1;

  // Exactly one of these fields must be populated.
  // (Not using "oneof", since that causes forward-compatibility problems.)
  ResourceReference resource_reference = 2;
  PromptReference prompt_reference = 3;

  message Argument {
    string name = 1;
    string value = 2;
  }
  Argument argument = 4;

  message Context {
    map<string, string> arguments = 1;
  }
  Context context = 5;
}

message CompletionResponse {
  ResponseFields common = 1;

  repeated string values = 2;
  int64 total_matches = 3;  // Optional.
  bool has_more = 4;        // Optional.
}