# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""


import grpc

import mcp.proto.mcp_pb2 as mcp__pb2

GRPC_GENERATED_VERSION = "1.75.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in mcp_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class McpStub:
    """
    Resources

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListResources = channel.unary_unary(
            "/third_party_py_mcp_grpc_proto.Mcp/ListResources",
            request_serializer=mcp__pb2.ListResourcesRequest.SerializeToString,
            response_deserializer=mcp__pb2.ListResourcesResponse.FromString,
            _registered_method=True,
        )
        self.ReadResource = channel.unary_unary(
            "/third_party_py_mcp_grpc_proto.Mcp/ReadResource",
            request_serializer=mcp__pb2.ReadResourceRequest.SerializeToString,
            response_deserializer=mcp__pb2.ReadResourceResponse.FromString,
            _registered_method=True,
        )
        self.ListResourceTemplates = channel.unary_unary(
            "/third_party_py_mcp_grpc_proto.Mcp/ListResourceTemplates",
            request_serializer=mcp__pb2.ListResourceTemplatesRequest.SerializeToString,
            response_deserializer=mcp__pb2.ListResourceTemplatesResponse.FromString,
            _registered_method=True,
        )
        self.ResourceSubscribe = channel.unary_stream(
            "/third_party_py_mcp_grpc_proto.Mcp/ResourceSubscribe",
            request_serializer=mcp__pb2.ResourceSubscribeRequest.SerializeToString,
            response_deserializer=mcp__pb2.ResourceSubscribeResponse.FromString,
            _registered_method=True,
        )
        self.ListPrompts = channel.unary_unary(
            "/third_party_py_mcp_grpc_proto.Mcp/ListPrompts",
            request_serializer=mcp__pb2.ListPromptsRequest.SerializeToString,
            response_deserializer=mcp__pb2.ListPromptsResponse.FromString,
            _registered_method=True,
        )
        self.GetPrompt = channel.unary_unary(
            "/third_party_py_mcp_grpc_proto.Mcp/GetPrompt",
            request_serializer=mcp__pb2.GetPromptRequest.SerializeToString,
            response_deserializer=mcp__pb2.GetPromptResponse.FromString,
            _registered_method=True,
        )
        self.ListTools = channel.unary_unary(
            "/third_party_py_mcp_grpc_proto.Mcp/ListTools",
            request_serializer=mcp__pb2.ListToolsRequest.SerializeToString,
            response_deserializer=mcp__pb2.ListToolsResponse.FromString,
            _registered_method=True,
        )
        self.CallTool = channel.stream_stream(
            "/third_party_py_mcp_grpc_proto.Mcp/CallTool",
            request_serializer=mcp__pb2.CallToolRequest.SerializeToString,
            response_deserializer=mcp__pb2.CallToolResponse.FromString,
            _registered_method=True,
        )
        self.Complete = channel.unary_unary(
            "/third_party_py_mcp_grpc_proto.Mcp/Complete",
            request_serializer=mcp__pb2.CompletionRequest.SerializeToString,
            response_deserializer=mcp__pb2.CompletionResponse.FromString,
            _registered_method=True,
        )


class McpServicer:
    """
    Resources

    """

    def ListResources(self, request, context):
        """List resources."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReadResource(self, request, context):
        """Read a resource.
        In order to better integrate with existing data plane mechanisms for
        request routing and authz, the client will add a header called
        mcp_resource whose value is the name of the resource being requested.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListResourceTemplates(self, request, context):
        """List resource templates."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResourceSubscribe(self, request, context):
        """Subscribe to a resource.  Server will send back a response whenever
        the resource changes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListPrompts(self, request, context):
        """
        Prompts


        List prompts.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPrompt(self, request, context):
        """Get a prompt.
        In order to better integrate with existing data plane mechanisms for
        request routing and authz, the client will add a header called
        mcp_resource whose value is the name of the prompt being requested.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListTools(self, request, context):
        """
        Tools


        List tools.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CallTool(self, request_iterator, context):
        """Call a tool.
        In order to better integrate with existing data plane mechanisms for
        request routing and authz, the client will add a header called
        mcp_resource whose value is the name of the tool being called.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Complete(self, request, context):
        """
        Completions


        Requests completions.
        In order to better integrate with existing data plane mechanisms for
        request routing and authz, the client will add a header called
        mcp_resource whose value is the name of the resource or prompt being
        used for completion.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_McpServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListResources": grpc.unary_unary_rpc_method_handler(
            servicer.ListResources,
            request_deserializer=mcp__pb2.ListResourcesRequest.FromString,
            response_serializer=mcp__pb2.ListResourcesResponse.SerializeToString,
        ),
        "ReadResource": grpc.unary_unary_rpc_method_handler(
            servicer.ReadResource,
            request_deserializer=mcp__pb2.ReadResourceRequest.FromString,
            response_serializer=mcp__pb2.ReadResourceResponse.SerializeToString,
        ),
        "ListResourceTemplates": grpc.unary_unary_rpc_method_handler(
            servicer.ListResourceTemplates,
            request_deserializer=mcp__pb2.ListResourceTemplatesRequest.FromString,
            response_serializer=mcp__pb2.ListResourceTemplatesResponse.SerializeToString,
        ),
        "ResourceSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.ResourceSubscribe,
            request_deserializer=mcp__pb2.ResourceSubscribeRequest.FromString,
            response_serializer=mcp__pb2.ResourceSubscribeResponse.SerializeToString,
        ),
        "ListPrompts": grpc.unary_unary_rpc_method_handler(
            servicer.ListPrompts,
            request_deserializer=mcp__pb2.ListPromptsRequest.FromString,
            response_serializer=mcp__pb2.ListPromptsResponse.SerializeToString,
        ),
        "GetPrompt": grpc.unary_unary_rpc_method_handler(
            servicer.GetPrompt,
            request_deserializer=mcp__pb2.GetPromptRequest.FromString,
            response_serializer=mcp__pb2.GetPromptResponse.SerializeToString,
        ),
        "ListTools": grpc.unary_unary_rpc_method_handler(
            servicer.ListTools,
            request_deserializer=mcp__pb2.ListToolsRequest.FromString,
            response_serializer=mcp__pb2.ListToolsResponse.SerializeToString,
        ),
        "CallTool": grpc.stream_stream_rpc_method_handler(
            servicer.CallTool,
            request_deserializer=mcp__pb2.CallToolRequest.FromString,
            response_serializer=mcp__pb2.CallToolResponse.SerializeToString,
        ),
        "Complete": grpc.unary_unary_rpc_method_handler(
            servicer.Complete,
            request_deserializer=mcp__pb2.CompletionRequest.FromString,
            response_serializer=mcp__pb2.CompletionResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("third_party_py_mcp_grpc_proto.Mcp", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("third_party_py_mcp_grpc_proto.Mcp", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Mcp:
    """
    Resources

    """

    @staticmethod
    def ListResources(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/ListResources",
            mcp__pb2.ListResourcesRequest.SerializeToString,
            mcp__pb2.ListResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReadResource(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/ReadResource",
            mcp__pb2.ReadResourceRequest.SerializeToString,
            mcp__pb2.ReadResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListResourceTemplates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/ListResourceTemplates",
            mcp__pb2.ListResourceTemplatesRequest.SerializeToString,
            mcp__pb2.ListResourceTemplatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ResourceSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/ResourceSubscribe",
            mcp__pb2.ResourceSubscribeRequest.SerializeToString,
            mcp__pb2.ResourceSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListPrompts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/ListPrompts",
            mcp__pb2.ListPromptsRequest.SerializeToString,
            mcp__pb2.ListPromptsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetPrompt(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/GetPrompt",
            mcp__pb2.GetPromptRequest.SerializeToString,
            mcp__pb2.GetPromptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListTools(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/ListTools",
            mcp__pb2.ListToolsRequest.SerializeToString,
            mcp__pb2.ListToolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CallTool(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/CallTool",
            mcp__pb2.CallToolRequest.SerializeToString,
            mcp__pb2.CallToolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Complete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/third_party_py_mcp_grpc_proto.Mcp/Complete",
            mcp__pb2.CompletionRequest.SerializeToString,
            mcp__pb2.CompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
